echo "Module: alpine"
echo "os-name: $os_name"
echo "os-iso: $iso_name"
echo "os-root: $os_root"
echo "os-boot: $os_boot"

##########################################################################################
# function #1: a bash function parse_release_info(), pass in 4 args listed at the top
#-----------------------------------------------------------------------------------------
# description: parse the os release info from the name iso file
# call format: parse_release_info $1 $2 $3 $4
# call result: to define shell vaiables for current os
##########################################################################################
parse_release_info() {
	echo "parse os release info ..."
	brand=$(echo $1 | sed 's/[-.\_]/\n/g' | head -n 1)
	isoVersion=$(echo $1 | sed 's/[-]/\n/g' | head -n 1)-$(echo $1 | sed 's/[-.]/\n/g' | tail -n +3 | head -n 1)
	isoEdition=$(echo $1 | sed 's/[-]/\n/g' | head -n 1)-$(echo $1 | sed 's/[-]/\n/g' | tail -n +2 | head -n 1)
	isoRelease=$(echo $1 | sed 's/[-]/\n/g' | tail -n +3 | head -n 1)
	isoArch=$(echo $1 | sed 's/[-]/\n/g' | tail -n +4 | sed 's/[-.]/\n/g' | head -n 1)
	isoPublish="iso"
	isoInstaller="/boot"
	isoExtract="Full" # or "Boot"
}

##########################################################################################
# function #2: a bash function populate_os_image(), pass in 4 args listed at the top
#-----------------------------------------------------------------------------------------
# description: extract folder structure from the iso file for net boot using
# call format: populate_os_image $1 $2 $3 $4
# call result: to extract the folder structure & files into an os folder under os-images folder
##########################################################################################
populate_os_image() {
	# sudo 7zz x -y -o$3/ $2
	sudo mkdir -pv /mnt/$1
	sudo mount -o loop $2 /mnt/$1
	sudo mkdir -pv $3
	sudo rsync -rlptDSH --delete /mnt/$1/ $3/
	sudo mkdir -pv $4
	sudo rsync -vrlptDSH --delete /mnt/$1$isoInstaller/ $4/
	sudo umount /mnt/$1
	sudo rm -rf /mnt/$1
}

##########################################################################################
# function #3: a bash populate_boot_script(), pass in 4 args listed at the top
#-----------------------------------------------------------------------------------------
# description: extract folder structure from the iso file to support the net boot
# call format: populate_boot_script $1 $2 $3 $4
# call result: to populate the ipxe boot script for current os
# presettings: two pxe variables have been created by the caller, they are available in pxe script
#              1) "server-ip": valus of the "dhcpNextServer" defined in the server conf
# 			   2) "root_path": value of the "pxeRoot" defined in the server conf
##########################################################################################
populate_boot_script() {
cat << EOF
# \$1(os_name) => $1
# \$2(os_iso) => $2
# \$3(os_root) => $3
# \$4(os_boot) => $4
# set alpine_repo http://dl-cdn.alpinelinux.org/alpine/v3.15/main
kernel $1/vmlinuz-lts initrd=initramfs-lts ip=dhcp modloop=http://$dhcpNextServer/$3/modloop-lts alpine_repo=http://dl-cdn.alpinelinux.org/alpine/v3.15/main
initrd $1/initramfs-lts
boot
EOF
}
